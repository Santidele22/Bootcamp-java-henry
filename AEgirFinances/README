PI 1

Creación del Proyecto en Java
Crea el proyecto como una aplicación de Java en IntelliJ IDEA.
Organiza las carpetas necesarias para estructurar adecuadamente el proyecto.
¿Empezamos?

En este punto, vamos a avanzar con los siguientes pasos:


START
PI 1

Creación del Proyecto en Java
Crea el proyecto como una aplicación de Java en IntelliJ IDEA.
Organiza las carpetas necesarias para estructurar adecuadamente el proyecto.

PI 2

Estructura Fundamental del Proyecto

- Llamar la clase principal ExpenseTrackerApp, que servirá como punto de entrada de la aplicación. [X]
- Definir las clases Expense, Category y User, [x]
asegurándose de utilizar conceptos de POO como herencia, encapsulación y polimorfismo.
-La clase Expense debe tener propiedades como amount, date, category y description. [x]
-La clase Category debe tener propiedades como name y description. [x]
-La clase User debe tener propiedades como name, email y un arreglo de expenses. [x]

-Implementar métodos básicos en estas clases para agregar, modificar y eliminar gastos. []
-Crear métodos como addExpense(), removeExpense() y updateExpense() en la clase User.
-Implementar manejo de excepciones para gestionar errores comunes,
como intentos de acceso a elementos inexistentes en la lista.
-Crear excepciones personalizadas como ExpenseNotFoundException.
-Utilizar bloques try-catch para manejar estas excepciones en métodos como removeExpense() y updateExpense().

Contador para Identificadores Únicos

-Crear un contador para manejar un identificador único para cada gasto.
Esto nos permitirá asignar a cada gasto un ID incremental generado por el contador,
lo cual será útil para llevar un seguimiento ordenado de nuestros gastos y facilitar su gestión.

PI 4

Manipulación de Cadenas de Texto

- Realizar la manipulación de cadenas de texto, específicamente en las categorías de nuestros gastos.
Podemos aplicar una transformación para que todas las categorías sean almacenadas en minúsculas,
 independientemente de cómo fueron escritas originalmente.
Esto nos ayudará a tener uniformidad en nuestros datos y simplificará las operaciones de búsqueda y
filtrado posteriormente.

PI 5

Implementación de Excepciones Customizadas

-Crear al menos una excepción customizada y relanzarla en algunos puntos de nuestra aplicación
donde antes mostrábamos simplemente un error por consola.
-Detectar algún punto de flujo indeseado en nuestra aplicación y capturar esa excepción.
Esto puede incluir, por ejemplo, un NumberFormatException o IllegalArgumentException
si estamos pasando un tipo de dato erróneo, o un NullPointerException si un valor se pasa como nulo y
estamos tratando de manipularlo para hacer algo.

Tips

Aplicar principios de POO adecuadamente: Asegúrate de utilizar herencia, encapsulación y polimorfismo en la definición de clases y métodos.
Utilizar modificadores de acceso: (public, private) para encapsular los datos correctamente.
Documentar el código: con comentarios claros para facilitar su comprensión.
Mantener una estructura de paquetes organizada: para una mejor mantenibilidad.

/PARTE 2
PI 1

Implementación de la Lista de Gastos
Implementa una lista de gastos utilizando una colección de Java adecuada (por ejemplo, ArrayList).
PI 2

Gestión de Gastos en la Clase User
En la clase User, agrega una propiedad expenses de tipo List<Expense>.
Inicializa la lista en el constructor de User
PI 3

Interfaces para Gestión de Gastos
Genera una interfaz funcional y otra con métodos, que definan métodos para validar gastos, calcular gastos, etc.
PI 4

Uso de Genéricos en Colecciones
Utiliza genéricos para manejar distintos tipos de datos en las colecciones.
Asegúrate de que las listas y otros tipos de colecciones utilicen genéricos para especificar el tipo de objetos que contendrán.
PI 5

Programación Funcional con Streams
Aplica programación funcional para realizar operaciones sobre las colecciones, como filtrado y mapeo de gastos.
Utiliza streams para filtrar gastos por categoría o por rango de fechas.

PI 6

Ejemplo
List<Expense> filteredExpenses = expenses.stream().filter(expense -> expense.getCategory().equals("Food")).collect(Collectors.toList());


Tips

Revisa la documentación de las colecciones de Java para seleccionar la más adecuada para tu necesidad.
Explora las funciones lambda y streams de Java para simplificar operaciones sobre colecciones.

Asegúrate de que tus métodos sean robustos y manejen correctamente las excepciones.
